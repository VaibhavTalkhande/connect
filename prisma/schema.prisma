generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(uuid())
  clerkUserId    String  @unique
  email          String  @unique
  username       String? @unique
  name           String?
  imageUrl       String?
  role           Role    @default(MENTEE) // NEW: Role field to differentiate Mentor and Mentee
  expertise      String[] // NEW: Mentors specify their area of expertise
  bio            String? // NEW: Mentor biography for more info on profile
  events         Event[] @relation("UserEvents")
  bookings       Booking[] @relation("UserBookings")
  availability   Availability?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Event {
  id             String    @id @default(uuid())
  title          String
  description    String?
  duration       Int
  price          Int       // NEW: Price for each event
  userId         String
  user           User      @relation("UserEvents", fields: [userId], references: [id])
  bookings       Booking[]
  isPrivate      Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Booking {
  id             String     @id @default(uuid())
  eventId        String
  event          Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId         String
  user           User       @relation("UserBookings", fields: [userId], references: [id]) // NEW: UserBookings relationship to link bookings to users
  name           String
  email          String
  additionalInfo String?
  startTime      DateTime
  endTime        DateTime
  meetLink       String?
  googleEventId  String?
  paymentStatus  PaymentStatus @default(PENDING) // NEW: Payment status for booking
    payment        Payment?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Availability {
  id             String            @id @default(uuid())
  userId         String            @unique
  user           User              @relation(fields: [userId], references: [id])
  days           DayAvailability[] 
  timeGap        Int
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model DayAvailability {
  id             String     @id @default(uuid())
  availabilityId String
  day            DayOfWeek
  startTime      DateTime
  endTime        DateTime
  availability   Availability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)
}

model Payment {
  id             String     @id @default(uuid())
  bookingId      String @unique
  amount         Int
  status         PaymentStatus @default(PENDING)
  booking        Booking     @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

enum Role {
  MENTOR
  MENTEE
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
